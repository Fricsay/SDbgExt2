import "ClrData.idl";

#define PADIMPL(prefix,bytes)	BYTE padding##prefix[##bytes]
#define PAD(prefix,bytes)	PADIMPL(prefix,bytes)
#define PAD_DWORD(x)		PAD(__COUNTER__, x*4)
#define PAD_ADDR(x)			PAD(__COUNTER__, x*8)

typedef ULONG32 mdToken;
typedef mdToken mdTypeDef;
typedef mdToken mdFieldDef;


typedef struct ClrArrayData
{
	CLRDATA_ADDRESS ElementMethodTable;
	DWORD Size;
	DWORD Rank;
	DWORD NumElements;
	PAD_DWORD(1);
	DWORD ElementSize;
	PAD_DWORD(1);
	CLRDATA_ADDRESS FirstElement;
	CLRDATA_ADDRESS ArrayDataStart;
	PAD_DWORD(6);
} ClrArrayData;

typedef enum DacpObjectType { OBJ_STRING=0,OBJ_FREE,OBJ_OBJECT,OBJ_ARRAY,OBJ_OTHER } DacpObjectType;
typedef struct ClrObjectData
{
	CLRDATA_ADDRESS MethodTable;
	DacpObjectType ObjectType;
	PAD_DWORD(1);
	DWORD Size;
	ClrArrayData ArrayData;
	CLRDATA_ADDRESS Reserved;
	CLRDATA_ADDRESS ObjectAddress;
} ClrObjectData;

typedef struct ClrMethodTableData
{
	PAD_ADDR(1);
	CLRDATA_ADDRESS Module;
	CLRDATA_ADDRESS EEClass;
	CLRDATA_ADDRESS ParentMT;
	WORD NumInterfaces;
	WORD NumSlotsInVTable;
	WORD EEClass_TotalMethodSlots;
	WORD EEClass_VTableSlots;
	DWORD BaseSize;
	DWORD ComponentSize;
	DWORD mdToken;
	DWORD ClassAttributes;
	PAD_DWORD(4);
} ClrMethodTableData;  

typedef struct ClrFieldDescData
{
	UINT32 FieldType;
	UINT32 SigFieldType;
	CLRDATA_ADDRESS FieldMethodTable;
	CLRDATA_ADDRESS Module;
	mdTypeDef FieldTypeDefOrRef;
	mdFieldDef field;
	CLRDATA_ADDRESS MethodTableOfEnclosingClass;
	DWORD Offset;
	BOOL IsThreadLocal;
	BOOL IsContextLocal;
	BOOL IsStatic;
	CLRDATA_ADDRESS NextField;
} ClrFieldDescData;

typedef struct ClrMethodTableFieldData
{
	WORD NumInstanceFields;
	WORD NumStaticFields;
	WORD NumThreadStaticFields;
	WORD NumContextStaticFields;
	CLRDATA_ADDRESS FirstField;
	PAD_DWORD(3);
} ClrMethodTableFieldData;

typedef struct ClrThreadPoolData
{
	DWORD CpuUsage;
	PAD_DWORD(1);
	DWORD NumThreads;
	PAD_DWORD(1);
	DWORD MinLimitThreads;
	DWORD MaxLimitThreads;
	PAD_DWORD(2);
	PAD_ADDR(1);
	PAD_DWORD(2);
	DWORD NumTimers;
	DWORD NumCompPortTotal;
	DWORD NumCompPortFree;
	DWORD MaxCompPortFree;
	DWORD CurrCompPortLimit;
	DWORD MaxCompPortLimit;
	DWORD MinCompPortLimit;
} ClrThreadPoolData;

typedef struct ClrModuleData
{
	CLRDATA_ADDRESS PEFile;
	CLRDATA_ADDRESS Unknown02;
	CLRDATA_ADDRESS ModuleBase;
	CLRDATA_ADDRESS MetaDataStart;
	SIZE_T MetaDataLength;
	CLRDATA_ADDRESS Assembly;
	BOOL IsReflection;
	BOOL IsPEFile;
	ULONG64 BaseClassIndex;
	ULONG64 DomainNeutralIndex;

	CLRDATA_ADDRESS TransientFlags;
	CLRDATA_ADDRESS TypeDefToMethodTableMap;
	CLRDATA_ADDRESS TypeRefToMethodTableMap;
	CLRDATA_ADDRESS MethodDefToDescMap;
	CLRDATA_ADDRESS FieldDefToDescMap;
	CLRDATA_ADDRESS MemberRefToDescMap;
	CLRDATA_ADDRESS FileReferencesMap;
	CLRDATA_ADDRESS AssemblyReferencesMap;
	CLRDATA_ADDRESS Unknown18;
	CLRDATA_ADDRESS Unknown19;
	CLRDATA_ADDRESS Unknown20;
	CLRDATA_ADDRESS Unknown21;
} ClrModuleData;

typedef struct ClrThreadData
{
	DWORD CorThreadId;
	DWORD osThreadId;
	DWORD State;
	DWORD PreemptiveGCDisabled;

	CLRDATA_ADDRESS GCAllocContext;
	CLRDATA_ADDRESS GCAllocContextLimit;
	CLRDATA_ADDRESS Context;
	CLRDATA_ADDRESS Domain;
	CLRDATA_ADDRESS SharedStaticData;
	DWORD LockCount;
	DWORD unused;
	CLRDATA_ADDRESS UnsharedStaticData;
	CLRDATA_ADDRESS FirstNestedException;
	CLRDATA_ADDRESS FiberData;
	CLRDATA_ADDRESS LastThrownObjectHandle;
	CLRDATA_ADDRESS NextThread;
	CLRDATA_ADDRESS ThreadAddress;
} ClrThreadData;

typedef struct ClrNestedExceptionData
{
	CLRDATA_ADDRESS ExceptionObject;
	CLRDATA_ADDRESS NextNestedException;
} ClrNestedExceptionData;

typedef struct ClrThreadStoreData
{
	DWORD ThreadCount;
	DWORD UnstartedThreadCount;
	DWORD BackgroundThreadCount;
	DWORD PendingThreadCount;
	DWORD DeadThreadCount;

	CLRDATA_ADDRESS FirstThreadObj;
	CLRDATA_ADDRESS FinalizerThreadObj;
	CLRDATA_ADDRESS GCThread;
	CLRDATA_ADDRESS HostedRuntime;
} ClrThreadStoreData;

typedef struct ClrAppDomainStoreData
{
	CLRDATA_ADDRESS SharedDomain;
	CLRDATA_ADDRESS SystemDomain;
	LONG DomainCount;
} ClrAppDomainStoreData;

typedef enum DacpAppDomainDataStage {
	STAGE_CREATING,
	STAGE_READYFORMANAGEDCODE,
	STAGE_ACTIVE,
	STAGE_OPEN,
	STAGE_UNLOAD_REQUESTED,
	STAGE_EXITING,
	STAGE_EXITED,
	STAGE_FINALIZING,
	STAGE_FINALIZED,
	STAGE_HANDLETABLE_NOACCESS,
	STAGE_CLEARED,
	STAGE_COLLECTED,
	STAGE_CLOSED
} DacpAppDomainDataStage;

typedef struct ClrAppDomainData
{
	CLRDATA_ADDRESS AppDomainPtr;
	CLRDATA_ADDRESS SecurityDescriptor;
	CLRDATA_ADDRESS LowFrequencyHeap;
	CLRDATA_ADDRESS HighFrequencyHeap;
	CLRDATA_ADDRESS StubHeap;
	CLRDATA_ADDRESS DomainLocalBlock;
	CLRDATA_ADDRESS DomainLocalModules;
	DWORD Id;
	LONG AssemblyCount;
	LONG FailedAssemblyCount;
	DacpAppDomainDataStage AppDomainStage;
} ClrAppDomainData;

typedef struct ClrAssemblyData
{
	CLRDATA_ADDRESS AssemblyPtr;
	CLRDATA_ADDRESS ClassLoader;
	CLRDATA_ADDRESS ParentDomain;
	CLRDATA_ADDRESS AppDomainPtr;
	CLRDATA_ADDRESS AssemblySecurityDescriptor;
	BOOL IsDynamic;
	UINT ModuleCount;
	UINT LoadContext;
	BOOL IsDomainNeutral;
	DWORD LocationFlags;
} ClrAssemblyData;

typedef struct ClrDomainLocalModuleData
{
	CLRDATA_ADDRESS AppDomain;
	CLRDATA_ADDRESS Unused2;	    
	CLRDATA_ADDRESS ClassData;   
	CLRDATA_ADDRESS DynamicClassTable;   
	CLRDATA_ADDRESS GCStaticDataStart;
	CLRDATA_ADDRESS NonGCStaticDataStart; 
} ClrDomainLocalModuleData;

typedef struct ClrGcHeapData
{
	BOOL ServerMode;
	BOOL HeapsValid;
	UINT HeapCount;
	UINT MaxGeneration;
} ClrGcHeapData;

typedef struct GcGenerationData
{    
	CLRDATA_ADDRESS start_segment;
	CLRDATA_ADDRESS allocation_start;

	// These are examined only for generation 0, otherwise NULL
	CLRDATA_ADDRESS allocContextPtr;
	CLRDATA_ADDRESS allocContextLimit;
} GcGenerationData;

#define DAC_NUM_GENERATIONS 4

typedef struct ClrGcHeapStaticData
{
	CLRDATA_ADDRESS HeapAddress;
	CLRDATA_ADDRESS AllocAllocated;
	CLRDATA_ADDRESS Padding[7];

	GcGenerationData Generations[DAC_NUM_GENERATIONS];
	CLRDATA_ADDRESS EphemeralHeapSegment;

	CLRDATA_ADDRESS FinalizationFillPointers[DAC_NUM_GENERATIONS + 2];
	
	CLRDATA_ADDRESS LowestAddress;
	CLRDATA_ADDRESS HighestAddress;
	CLRDATA_ADDRESS CardTable;

	CLRDATA_ADDRESS MoreData[10];
} ClrGcHeapStaticData;

typedef struct ClrGcHeapSegmentData
{
	CLRDATA_ADDRESS Segment;
	CLRDATA_ADDRESS Allocated;
	CLRDATA_ADDRESS Committed;
	CLRDATA_ADDRESS Reserved;
	CLRDATA_ADDRESS Used;
	CLRDATA_ADDRESS AllocBegin;
	CLRDATA_ADDRESS NextSegment;
	CLRDATA_ADDRESS GCHeap;
	CLRDATA_ADDRESS Unknown9;
	CLRDATA_ADDRESS Unknown10;
	CLRDATA_ADDRESS Unknown11;
} ClrGcHeapSegmentData;

typedef enum JITTypes {TYPE_UNKNOWN=0,TYPE_JIT,TYPE_EJIT,TYPE_PJIT} JITTypes;

typedef struct ClrCodeHeaderData
{
	CLRDATA_ADDRESS GCInfo;
	JITTypes        JITType;
	CLRDATA_ADDRESS methodDescPtr;
	CLRDATA_ADDRESS MethodStart;
	DWORD           MethodSize;
	CLRDATA_ADDRESS ColdRegionStart;
	DWORD           ColdRegionSize;
	DWORD           HotRegionSize;
} ClrCodeHeaderData;

typedef struct ClrUsefulGlobalsData
{
	CLRDATA_ADDRESS ArrayMethodTable;
	CLRDATA_ADDRESS StringMethodTable;
	CLRDATA_ADDRESS ObjectMethodTable;
	CLRDATA_ADDRESS ExceptionMethodTable;
	CLRDATA_ADDRESS FreeMethodTable;
} ClrUsefulGlobalsData;

[
	object,
	uuid(436f00f2-b42a-4b9f-870c-e73db66ae930)
]
interface IXCLRDataProcess3 : IUnknown
{
	HRESULT GetThreadStoreData([out, retval] ClrThreadStoreData *ret) = 0;
	HRESULT GetAppDomainStoreData([out, retval] ClrAppDomainStoreData *ret) = 0;
	HRESULT GetAppDomainList([in] ULONG32 iArraySize, [out, size_is(iArraySize)] CLRDATA_ADDRESS domains[], [out] DWORD *numDomains) = 0;
	HRESULT GetAppDomainData([in] CLRDATA_ADDRESS domain, [out, retval] ClrAppDomainData *ret) = 0;
	HRESULT GetAppDomainName() = 0;
	HRESULT GetDomainFromContext() = 0;
	HRESULT GetAssemblyList([in] CLRDATA_ADDRESS domain, [in] ULONG32 iArraySize, [out, size_is(iArraySize)] CLRDATA_ADDRESS assemblies[], [out] DWORD *numAssemblies) = 0;
	HRESULT GetAssemblyData([in] CLRDATA_ADDRESS domain, [in] CLRDATA_ADDRESS assembly, [out, retval] ClrAssemblyData *ret) = 0;
	HRESULT GetAssemblyName([in] CLRDATA_ADDRESS addr, [in] ULONG32 iNameChars, [out] LPWSTR pwszName, [out] ULONG32 *strLen) = 0;
	HRESULT GetModule([in] CLRDATA_ADDRESS addr, [out, retval] IUnknown **pUnk) = 0;
	HRESULT GetModuleData([in] CLRDATA_ADDRESS addr, [out, retval] ClrModuleData *ret) = 0;
	HRESULT TraverseModuleMap() = 0;
	HRESULT GetAssemblyModuleList([in] CLRDATA_ADDRESS assembly, [in] ULONG32 iArraySize, [out, size_is(iArraySize)] CLRDATA_ADDRESS *modules, [out] DWORD *numModules) = 0;
	HRESULT GetILForModule() = 0;
	HRESULT GetThreadData([in] CLRDATA_ADDRESS threadAddr, [out, retval] ClrThreadData *ret) = 0;
	HRESULT GetThreadFromThinlockID() = 0;
	HRESULT GetStackLimits() = 0;
	HRESULT GetMethodDescData() = 0;
	HRESULT GetMethodDescPtrFromIP([in] CLRDATA_ADDRESS ip, [out, retval] CLRDATA_ADDRESS *methodDescPtr) = 0;
	HRESULT GetMethodDescName([in] CLRDATA_ADDRESS addr, [in] ULONG32 iNameChars, [out, size_is(iNameChars)] LPWSTR pwszName, [out] ULONG32 *strLen) = 0;
	HRESULT GetMethodDescPtrFromFrame([in] CLRDATA_ADDRESS frameAddr, [out, retval] CLRDATA_ADDRESS *methodDescPtr) = 0;
	HRESULT GetMethodDescFromToken([in] CLRDATA_ADDRESS moduleAddr, [in] mdToken token, [out, retval] CLRDATA_ADDRESS *mdAddr) = 0;
	HRESULT GetMethodDescTransparencyData() = 0;
	HRESULT GetCodeHeaderData([in] CLRDATA_ADDRESS ipAddr, [out, retval] ClrCodeHeaderData *ret) = 0;
	HRESULT GetJitManagerList() = 0;
	HRESULT GetJitHelperFunctionName() = 0;
	HRESULT GetJumpThunkTarget() = 0;
	HRESULT GetThreadpoolData() = 0;
	HRESULT GetWorkRequestData() = 0;
	HRESULT GetHillClimbingLogEntry() = 0;
	HRESULT GetObjectData([in] CLRDATA_ADDRESS addr, [out, retval] ClrObjectData* ret) = 0;
	HRESULT GetObjectStringData([in] CLRDATA_ADDRESS addr, [in] ULONG32 iNameChars, [out, size_is(iNameChars)] LPWSTR pwszName, ULONG32 *strLen) = 0;
	HRESULT GetObjectClassName([in] CLRDATA_ADDRESS addr, [in] ULONG32 iNameChars, [out, size_is(iNameChars)] LPWSTR pwszName, ULONG32 *strLen) = 0;
	HRESULT GetMethodTableName([in] CLRDATA_ADDRESS mtAddr, [in] ULONG32 iNameChars, [out, size_is(iNameChars)] LPWSTR pwszName, ULONG32 *strLen) = 0;
	HRESULT GetMethodTableData([in] CLRDATA_ADDRESS mtAddr, [out, retval] ClrMethodTableData *ret) = 0;
	HRESULT GetMethodTableSlot([in] CLRDATA_ADDRESS mtAddr, [in] UINT32 slotNumber, [out, retval] CLRDATA_ADDRESS *ret) = 0;
	HRESULT GetMethodTableFieldData([in] CLRDATA_ADDRESS mtAddr, [out, retval] ClrMethodTableFieldData *ret) = 0;
	HRESULT GetMethodTableTransparencyData() = 0;
	HRESULT GetMethodTableForEEClass() = 0;
	HRESULT GetFieldDescData([in] CLRDATA_ADDRESS fieldAddr, [out, retval] ClrFieldDescData *ret) = 0;
	HRESULT GetFrameName([in] CLRDATA_ADDRESS addr, [in] ULONG32 iNameChars, [out, size_is(iNameChars)] LPWSTR pwszName, [out] ULONG32 *strLen) = 0;
	HRESULT GetPEFileBase() = 0;
	HRESULT GetPEFileName([in] CLRDATA_ADDRESS addr, [in] ULONG32 iNameChars, [out, size_is(iNameChars)] LPWSTR pwszName, [out] ULONG32 *strLen) = 0;
	HRESULT GetGCHeapData([out, retval] ClrGcHeapData *ret) = 0;
	HRESULT GetGCHeapList([in] ULONG32 iArraySize, [out, size_is(iArraySize)] CLRDATA_ADDRESS *heaps, [out] DWORD *numHeaps) = 0;
	HRESULT GetGCHeapDetails([in] CLRDATA_ADDRESS heap, [out, retval] ClrGcHeapStaticData *ret) = 0;
	HRESULT GetGCHeapStaticData([out, retval] ClrGcHeapStaticData *ret) = 0;
	HRESULT GetHeapSegmentData([in] CLRDATA_ADDRESS segment, [out, retval] ClrGcHeapSegmentData *ret) = 0;
	HRESULT GetOOMData() = 0;
	HRESULT GetOOMStaticData() = 0;
	HRESULT GetHeapAnalyzeData() = 0;
	HRESULT GetHeapAnalyzeStaticData() = 0;
	HRESULT GetDomainLocalModuleData() = 0;
	HRESULT GetDomainLocalModuleDataFromAppDomain([in] CLRDATA_ADDRESS domainAddr, SIZE_T moduleDomainNeutralIndex, [out, retval] ClrDomainLocalModuleData *ret) = 0;
	HRESULT GetDomainLocalModuleDataFromModule([in] CLRDATA_ADDRESS moduleAddr, [out, retval] ClrDomainLocalModuleData *ret) = 0;
	HRESULT GetThreadLocalModuleData() = 0;
	HRESULT GetSyncBlockData() = 0;
	HRESULT GetSyncBlockCleanupData() = 0;
	HRESULT GetHandleEnum() = 0;
	HRESULT GetHandleEnumForTypes() = 0;
	HRESULT GetHandleEnumForGC() = 0;
	HRESULT TraverseEHInfo() = 0;
	HRESULT GetNestedExceptionData([in] CLRDATA_ADDRESS addr, [out, retval] ClrNestedExceptionData *ret) = 0;
	HRESULT GetStressLogAddress() = 0;
	HRESULT TraverseLoaderHeap() = 0;
	HRESULT GetCodeHeapList() = 0;
	HRESULT TraverseVirtCallStubHeap() = 0;
	HRESULT GetUsefulGlobals([out, retval] ClrUsefulGlobalsData *ret) = 0;
	HRESULT GetClrWatsonBuckets() = 0;
	HRESULT GetTLSIndex() = 0;
	HRESULT GetDacModuleHandle() = 0;
	HRESULT GetRCWData() = 0;
	HRESULT GetRCWInterfaces() = 0;
	HRESULT GetCCWData() = 0;
	HRESULT GetCCWInterfaces() = 0;
	HRESULT TraverseRCWCleanupList() = 0;
	HRESULT GetStackReferences() = 0;
	HRESULT GetRegisterName() = 0;
	HRESULT GetThreadAllocData() = 0;
	HRESULT GetHeapAllocData() = 0;
	HRESULT GetFailedAssemblyList() = 0;
	HRESULT GetPrivateBinPaths() = 0;
	HRESULT GetAssemblyLocation() = 0;
	HRESULT GetAppDomainConfigFile() = 0;
	HRESULT GetApplicationBase() = 0;
	HRESULT GetFailedAssemblyData() = 0;
	HRESULT GetFailedAssemblyLocation() = 0;
	HRESULT GetFailedAssemblyDisplayName() = 0;
};