import "idl\_ClrTypes.idl";

interface IClrProcess;
struct ClrObjectData;

typedef struct DctEntry
{
	CLRDATA_ADDRESS EntryPtr;
	CLRDATA_ADDRESS KeyPtr;
	CLRDATA_ADDRESS ValuePtr;
	ULONG32 HashCode;
} DctEntry;

typedef enum THREADPOOL_WORKITEM_TYPE 
{ 
	CB_TYPE_INVALID, 
	CB_TYPE_QUEUEUSERWORKITEM, 
	CB_TYPE_ASYNC_WORKITEM  
} THREADPOOL_WORKITEM_TYPE;

typedef struct ThreadPoolWorkItem
{
	CLRDATA_ADDRESS WorkItemPtr;
	CLRDATA_ADDRESS StatePtr;
	CLRDATA_ADDRESS DelegatePtr;
	CLRDATA_ADDRESS DelegateMethodDesc;
	THREADPOOL_WORKITEM_TYPE Type;
	AppDomainAndValue Queue;
} ThreadPoolWorkItem;

[
	object,
	uuid(10D69AE4-80AA-4D87-AF18-86DD0010AA8C)
]
interface IEnumObjectsCallback : IUnknown
{
	HRESULT Callback([in] ClrObjectData objData);
};

[
	object,
	uuid(5F630AA1-29F7-449F-BD91-3C152F687910)
]
interface IEnumObjectsBatchCallback : IEnumObjectsCallback
{
	HRESULT Callback([in] ULONG numObjects, [in, size_is(100), length_is(numObjects)] ClrObjectData *objects);
};

[
	object,
	uuid(FF9B39EB-CCAC-4AA2-B3C4-63BDDFA0AC9F)
]
interface IEnumHashtableCallback : IUnknown
{
	HRESULT Callback([in] DctEntry ent);
}

[
	object,
	uuid(0DDAEF1D-A0B9-43F3-8F89-9DEAC2FC5349)
]
interface IEnumHashtableBatchCallback : IEnumHashtableCallback
{
	HRESULT Callback([in] ULONG numEntries, [in] DctEntry ent[50]);
}

[
	object,
	uuid(0DAE7AEF-6671-48A0-AB96-D90931862882)
]
interface IEnumThreadPoolCallback : IUnknown
{
	HRESULT Callback([in] ThreadPoolWorkItem item);
}

[
	object,
	uuid(6A175A7A-F99B-4EBC-AC6D-7D13D98539A2)
]
interface IEnumSqlConnectionPoolsCallback : IUnknown
{
	HRESULT OnFactory([in] CLRDATA_ADDRESS factory);
	HRESULT OnPoolGroup([in, string] LPWSTR connString, [in] CLRDATA_ADDRESS poolGroup);
	HRESULT OnPool([in] CLRDATA_ADDRESS pool, [in, string] LPWSTR sid, [in] UINT state, [in] UINT waitCount, [in] UINT totalObjects);
	HRESULT OnConnection([in] CLRDATA_ADDRESS conn, [in] UINT32 state, [in] ClrDateTime createTime, [in] UINT32 pooledCount, [in] BOOL isOpen, [in] UINT32 asyncCommandCount,
		[in] CLRDATA_ADDRESS cmd, [in, string] LPWSTR cmdText, [in] UINT32 timeout);
}

[
	object,
	uuid(1F0565EB-95CE-48DE-BC4A-54AD9C034A2C)
]
interface ISDbgExt : IUnknown
{
	HRESULT GetProcess([out, retval] IClrProcess **proc);
	HRESULT GetObjectData([in] CLRDATA_ADDRESS objAddr, [out, retval] ClrObjectData *data);
	HRESULT EvaluateExpression([in] CLRDATA_ADDRESS rootObj, [in, string] LPWSTR expression, [out, retval] CLRDATA_ADDRESS *result);
	HRESULT EnumStackObjects(DWORD corThreadId, IEnumObjectsCallback *cb);
	HRESULT EnumStackObjectsByThreadObj(CLRDATA_ADDRESS threadObj, IEnumObjectsCallback *cb);
	HRESULT EnumHeapObjects(IEnumObjectsCallback *cb);
	HRESULT EnumHashtable([in] CLRDATA_ADDRESS dctObj, [in] IEnumHashtableCallback *cb);
	HRESULT EnumThreadPoolQueues([in] IEnumThreadPoolCallback *tpQueueCb);
	HRESULT EnumSqlConnectionPools([in] IEnumSqlConnectionPoolsCallback *cb, CLRDATA_ADDRESS targetFactory);
	HRESULT FindDctEntryByHash([in] CLRDATA_ADDRESS dctObj, [in] UINT32 hash, [out, retval] CLRDATA_ADDRESS *entryAddr);
	HRESULT GetHttpContextFromThread([in] ClrThreadContext ctx, [out, retval] ClrHttpContext *httpContext);
};