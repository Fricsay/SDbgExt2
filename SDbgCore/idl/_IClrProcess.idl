import "oaidl.idl";
import "ocidl.idl";
import "idl\_ClrTypes.idl";
import "idl\_IClrObject.idl";
import "idl\_IXCLRDataProcess3.idl";
import "ClrData.idl";

//#pragma midl_echo("STDAPI CLRDataCreateInstance(REFIID iid, ICLRDataTarget* target, void** iface);")
//#pragma midl_echo("typedef HRESULT (STDAPICALLTYPE* PFN_CLRDataCreateInstance)(REFIID iid, ICLRDataTarget* target, void** iface);")

[
	object,
	uuid(C6A25901-7C54-4D71-BC3E-DCFE7D0C6CD8)
]
interface IEnumThreadsCallback : IUnknown
{
	HRESULT Callback([in] CLRDATA_ADDRESS threadObj, [in] ClrThreadData threadData);
}

[
	object,
	uuid(F78E3019-5F70-4F7A-A1DA-254F96FD849A)
]
interface IEnumHeapSegmentsCallback : IUnknown
{
	HRESULT Callback([in] CLRDATA_ADDRESS segment, [in] ClrGcHeapSegmentData segData);
}

[
	object,
	local,
	uuid(C20A701D-82B7-498D-B35F-8C2874542A1C)
]
interface IClrProcess : IUnknown
{
	BOOL IsValidObject(CLRDATA_ADDRESS obj);

	HRESULT GetProcess(IXCLRDataProcess3 **ppDac);
	HRESULT GetDataAccess(IDacMemoryAccess **ppDcma);
	HRESULT FindFieldByName(CLRDATA_ADDRESS methodTable, LPWSTR fieldName, CLRDATA_ADDRESS *field, ClrFieldDescData *fieldData);
	HRESULT FindTypeByName(LPWSTR assemblyName, LPWSTR typeName, CLRDATA_ADDRESS *ret);
	HRESULT FindMethodByName(CLRDATA_ADDRESS methodTable, LPWSTR methodSig, CLRDATA_ADDRESS *methodDesc);
	HRESULT GetStaticFieldValues(CLRDATA_ADDRESS field, ULONG32 iValues, AppDomainAndValue *pValues, ULONG32 *numValues);
	HRESULT GetStaticFieldValue(CLRDATA_ADDRESS field, CLRDATA_ADDRESS appDomain, AppDomainAndValue *ret);
	HRESULT GetFieldValuePtr(CLRDATA_ADDRESS obj, LPWSTR fieldName, CLRDATA_ADDRESS *addr);
	HRESULT GetFieldValueBuffer(CLRDATA_ADDRESS obj, LPWSTR fieldName, ULONG32 bufferSize, PVOID buffer, ULONG *bytesRead);
	HRESULT GetFieldValueString(CLRDATA_ADDRESS obj, LPWSTR fieldName, ULONG32 bufferSize, LPWSTR buffer, ULONG *bytesRead);
	HRESULT ReadFieldValueBuffer(CLRDATA_ADDRESS obj, ClrFieldDescData fd, ULONG32 numBytes, PVOID buffer, ULONG *bytesRead); 
	HRESULT EnumThreads(IEnumThreadsCallback *cb);
	HRESULT FindThreadByCorThreadId(DWORD corThreadId, CLRDATA_ADDRESS *unmanagedThreadObj);
	HRESULT FindThreadByOsThreadId(DWORD osThreadId, CLRDATA_ADDRESS *unmanagedThreadObj);
	HRESULT GetManagedThreadObject(CLRDATA_ADDRESS unmanagedThreadObj, CLRDATA_ADDRESS *managedThreadObj);
	HRESULT GetThreadExecutionContext(CLRDATA_ADDRESS managedThreadObj, ClrThreadContext *ctx);
	HRESULT EnumHeapSegments([in] IEnumHeapSegmentsCallback *cb);
	HRESULT GetClrObject(CLRDATA_ADDRESS obj, IClrObject **ret);
	HRESULT GetClrObjectArray(CLRDATA_ADDRESS objArray, IClrObjectArray **ret);
	HRESULT FormatDateTime(ULONG64 ticks, ULONG32 cchBuffer, [out, string, size_is(cchBuffer)] LPWSTR buffer);
	HRESULT GetDelegateInfo(CLRDATA_ADDRESS delegateAddr, CLRDATA_ADDRESS *target, CLRDATA_ADDRESS *methodDesc);
}