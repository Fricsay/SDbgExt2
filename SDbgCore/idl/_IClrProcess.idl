import "idl\_ClrTypes.idl";
import "idl\_IClrObject.idl";
import "idl\_IXCLRDataProcess3.idl";
import "ClrData.idl";

//#pragma midl_echo("STDAPI CLRDataCreateInstance(REFIID iid, ICLRDataTarget* target, void** iface);")
//#pragma midl_echo("typedef HRESULT (STDAPICALLTYPE* PFN_CLRDataCreateInstance)(REFIID iid, ICLRDataTarget* target, void** iface);")

[
	object,
	uuid(C6A25901-7C54-4D71-BC3E-DCFE7D0C6CD8)
]
interface IEnumThreadsCallback : IUnknown
{
	HRESULT Callback([in] CLRDATA_ADDRESS threadObj, [in] ClrThreadData threadData);
}

[
	object,
	uuid(F78E3019-5F70-4F7A-A1DA-254F96FD849A)
]
interface IEnumHeapSegmentsCallback : IUnknown
{
	HRESULT Callback([in] CLRDATA_ADDRESS segment, [in] ClrGcHeapSegmentData segData);
}

[
	object,
	local,
	uuid(C20A701D-82B7-498D-B35F-8C2874542A1C)
]
interface IClrProcess : IUnknown
{
	BOOL IsValidObject(CLRDATA_ADDRESS obj);

	HRESULT GetProcess([out, retval] IXCLRDataProcess3 **ppDac);
	HRESULT GetDataAccess([out, retval] IDacMemoryAccess **ppDcma);
	HRESULT FindFieldByName([in] CLRDATA_ADDRESS methodTable, [in, string] LPWSTR fieldName, [out, retval] CLRDATA_ADDRESS *field);
	HRESULT FindFieldByNameEx([in] CLRDATA_ADDRESS methodTable, [in, string] LPWSTR fieldName, [out] CLRDATA_ADDRESS *field, [out] ClrFieldDescData *fieldData);
	HRESULT FindTypeByName([in, string] LPWSTR assemblyName, [in, string] LPWSTR typeName, [out, retval] CLRDATA_ADDRESS *ret);
	HRESULT FindMethodByName([in] CLRDATA_ADDRESS methodTable, [in, string] LPWSTR methodSig, [out, retval] CLRDATA_ADDRESS *methodDesc);
	HRESULT GetStaticFieldValues([in] CLRDATA_ADDRESS field, [in] ULONG32 iValues, [out, size_is(iValues), length_is(*numValues)] AppDomainAndValue *pValues, [out] ULONG32 *numValues);
	HRESULT GetStaticFieldValue([in] CLRDATA_ADDRESS field, [in] CLRDATA_ADDRESS appDomain, [out, retval] AppDomainAndValue *ret);
	HRESULT GetFieldValuePtr([in] CLRDATA_ADDRESS obj, [in, string] LPWSTR fieldName, [out, retval] CLRDATA_ADDRESS *addr);
	HRESULT GetFieldValueBuffer([in] CLRDATA_ADDRESS obj, [in, string] LPWSTR fieldName, [in] ULONG32 bufferSize, [out, size_is(bufferSize)] PVOID buffer, [out] ULONG *bytesRead);
	HRESULT GetFieldValueString([in] CLRDATA_ADDRESS obj, [in, string] LPWSTR fieldName, [in] ULONG32 bufferSize, [out, size_is(bufferSize)] LPWSTR buffer, [out] ULONG *bytesRead);
	HRESULT ReadFieldValueBuffer([in] CLRDATA_ADDRESS obj, [in] ClrFieldDescData fd, [in] ULONG32 numBytes, [out, size_is(numBytes)] PVOID buffer, [out] ULONG *bytesRead); 
	HRESULT EnumThreads([in] IEnumThreadsCallback *cb);
	HRESULT FindThreadByCorThreadId([in] DWORD corThreadId, [out, retval] CLRDATA_ADDRESS *unmanagedThreadObj);
	HRESULT FindThreadByOsThreadId([in] DWORD osThreadId, [out, retval] CLRDATA_ADDRESS *unmanagedThreadObj);
	HRESULT GetManagedThreadObject([in] CLRDATA_ADDRESS unmanagedThreadObj, [out, retval] CLRDATA_ADDRESS *managedThreadObj);
	HRESULT GetThreadExecutionContext([in] CLRDATA_ADDRESS managedThreadObj, [out, retval] ClrThreadContext *ctx);
	HRESULT EnumHeapSegments([in] IEnumHeapSegmentsCallback *cb);
	HRESULT GetClrObject([in] CLRDATA_ADDRESS obj, [out, retval] IClrObject **ret);
	HRESULT GetClrObjectArray([in] CLRDATA_ADDRESS objArray, [out, retval] IClrObjectArray **ret);
	HRESULT GetDateTimeFromTicks([in] ULONG64 ticks, [out, retval] ClrDateTime *dt);
	HRESULT FormatDateTime([in] ULONG64 ticks, [in] ULONG32 cchBuffer, [out, string, size_is(cchBuffer)] LPWSTR buffer);
	HRESULT GetDelegateInfo([in] CLRDATA_ADDRESS delegateAddr, [out, retval] ClrDelegateInfo *ret);
}